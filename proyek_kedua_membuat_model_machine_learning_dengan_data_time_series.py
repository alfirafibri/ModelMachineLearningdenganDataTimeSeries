# -*- coding: utf-8 -*-
"""Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TexAnIGx30UBs8gRL44Rg2oW84D-LOpO
"""

#import library
import tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive/')

#read dataset
import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/dataset/worldometer_coronavirus_daily_data.csv')
df

#drop kolom
df.drop(['active_cases', 'cumulative_total_cases', 'cumulative_total_deaths'], axis = 1, inplace = True)
display(df)

# ambil data 2021
df['date'] = pd.to_datetime(df['date'])
get_data = (df['date'] > '2021-01-01') & (df['date'] <= '2021-12-31')
df.loc[get_data]

df = df.loc[get_data]
display(df)

#ambil data negara
df = df.loc[df['country'].isin(['Poland', 'China', 'Denmark'])]
display(df)

#drop kolom
df.drop(['country'], axis = 1, inplace = True)
df.reset_index(drop = True)

df.isnull().sum()

df.dropna(subset = ['daily_new_cases'], inplace = True)
df.dropna(subset = ['daily_new_deaths'], inplace = True)
df.isnull().sum()

df_plot = df
df_plot[df_plot.columns.to_list()].plot(subplots = True, figsize = (30, 10))
plt.show()

dates = df['date'].values
temp = df['daily_new_deaths'].values

dates = np.array(dates)
temp = np.array(temp)

plt.figure(figsize = (30, 15))
plt.plot(dates, temp)

plt.title('Daily New Deaths', fontsize = 15)
plt.ylabel('Total')
plt.xlabel('Datetime')

df.dtypes

#split dataset
from sklearn.model_selection import train_test_split
x_train, x_valid, y_train, y_valid = train_test_split(temp, dates, train_size = 0.8, test_size = 0.2, shuffle = False)

print('Jumlah Data Train : ', len(x_train))
print('Jumlah Data Validation : ', len(x_valid))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis = -1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift = 1, drop_remainder = True)
  ds = ds.flat_map(lambda w : w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w : (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM,Dense,Bidirectional,Dropout

tf.keras.backend.set_floatx('float64')

train_set = windowed_dataset(x_train, window_size = 64, batch_size = 200, shuffle_buffer = 1000)
val_set = windowed_dataset(x_valid, window_size = 64, batch_size = 200, shuffle_buffer = 1000)

model = Sequential([
    Bidirectional(LSTM(60, return_sequences=True)),
    Bidirectional(LSTM(60)),
    Dense(30, activation="relu"),
    Dense(10, activation="relu"),
    Dense(1),
])

max = df['daily_new_deaths'].max()
print('Max value : ' )
print(max)

min = df['daily_new_deaths'].min()
print('Min Value : ')
print(min)

#mae
mae = (954.0 - 0.0) * (10 / 100)
print(mae)

#callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae') < 95.4 and logs.get('val_mae') < 95.4):
      print("MAE of the model < 10% of data scale")
      self.model.stop_training = True
callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set, epochs=500, validation_data = val_set, callbacks=[callbacks])

#plot accuracy
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Model Accuracy')
plt.xlabel('epoch')
plt.ylabel('Mae')
plt.legend(['Train', 'Val'], loc = 'best')
plt.show()

#plot loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.xlabel('epoch')
plt.ylabel('loss')
plt.legend(['Train', 'Val'], loc = 'best')
plt.show()